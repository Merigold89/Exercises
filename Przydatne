# sumowanie kolejnych elementów ciagu: [1, 3, 5] -> [1, 4, 8]
number_list = [int(x) for x in input()]
new_list = [sum(number_list[0:x:1]) for x in range(1, len(number_list) + 1)]
print(new_list)

# zamiana list na str: ['k', 'o', 't'] -> kot
sentence = input()
changes = [(ord(x) + 1) for x in sentence]
sentence_2 = [str(chr(x)) for x in changes]
result = ''.join(sentence_2)
print(result)

# zamiana cyfr/ liczb na litery za pomocą Unicode:
n_range = int(input('How many numbers do you want to enter?\n'))
print('Enter the numbers you want to convert to Unicode into letters:')
numbers = [int(input()) for x in range(0, n_range)]
word = [chr(x) for x in numbers]
print(''.join(word))

# liczby pierwsze w zakresie 2 - 1000:
prime_numbers = [number for number in range(2, 1001) if all(number % i != 0 for i in range(2, number - 1))]

# filtruje zagnieżdżone tablice w poszukiwaniu słowa <= prowadzonej liczbie:
text = [["Glitch", "is", "a", "minor", "problem", "that", "causes", "a", "temporary", "setback"],
        ["Ephemeral", "lasts", "one", "day", "only"],
        ["Accolade", "is", "an", "expression", "of", "praise"]]
length = int(input())
new_list = []
for words in text:
    for word in words:
        if len(word) <= length:
            new_list.append(word)
print(new_list)

# wybiera z zagnieżdżonych list nazwisko studenta z oceną A i zapisuje w nowej liście:
students = [["Jane", "B"], ["Kate", "B"], ["Alex", "C"], ["Elsa", "A"], ["Max", "B"], ["Chris", "A"]]
        # metoda 1
A_grades = []
for student in students:
    for grade in student:
        if grade == 'A':
            A_grades.append(student[0])
print(A_grades)
        # metoda 2
A_grades = [student[0] for student in students for grade in student if grade == "A"]
print(A_grades)
        # metoda 3
print([student for (student, grade) in students if grade == "A"])

# wycinanie key z wartością, jak nie ma to komunikat:
squares = {1: 1, 3: 9, 5: 25, 6: 36, 8: 64, 10: 100, 11: 121, 15: 225}
key = input()
print(squares.pop(int(key), 'There is no such key'))

# tworzy talie kart i przypisuje im wartości. PO wprowadzneiu wybranych 6 kart liczy średnią na ręce.
cards = {str(i): i for i in range(2, 11)}
cards.update({"Jack": 11, "Queen": 12, "King": 13, "Ace": 14})
# inaczej card_deck = {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'Jack': 11, 'Queen': 12, 'King': 13, 'Ace': 14}
hand = [input() for i in range(6)]

print(sum(cards[card] for card in hand) / len(hand)) # lub print(sum(card[input()] for num in range(6)) / 6)

# przypisywanie ilości do danych grup, jak brak ilości to None:
groups = ['1A', '1B', '1C', '2A', '2B', '2C', '3A', '3B', '3C']
classes = {}
number = int(input())
data = [int(input()) for _ in range(number)]
for num in range(0, len(groups)):
    key = groups[num]
    if num < number:
        value = data[num]
    else:
        value = None
    classes[key] = value
print(classes)
